}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n")
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n")
help("legend")
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n", text.font = 4)
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n", text.font = 3)
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n", text.font = 2)
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n", text.width = 10)
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n", text.width = 5)
plot(ehec$week, ehec$bd1, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ehec$week, ehec$ks1, col = "#bf4f51", lwd = 2)
plot(ehec$week, ehec$bd1, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ehec$week, ehec$ks1, col = "#bf4f51")
plot(ehec$week, ehec$bd1, type = "l", col = "#bf4f51", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ehec$week, ehec$ks1)
View(ehec)
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal", bandwidth = bandwidths)
View(ksmooth_result)
View(ksmooth_result)
lines(ksmooth_result$x, ksmooth_result$y, col = "orange", lwd = 2)
plot(ehec$week, ehec$bd1, type = "l", col = "#bf4f51", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
lines(ksmooth_result$x, ksmooth_result$y, col = "orange", lwd = 2)
plot(ehec$week, ehec$bd1, type = "l", col = "#bf4f51", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
lines(ksmooth_result$x, ksmooth_result$y, col = "orange", lwd = 2)
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in c(1:4)) {
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal", bandwidth = bandwidths[i])
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ksmooth_result$x, ksmooth_result$y)
legend("topright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c("black", colors[i]), lty = 1, lwd = 2, bty = "n")
}
plot(ehec$week, ehec[,3], type = "l", col = colors[1], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ksmooth_result$x, ksmooth_result$y)
legend("topright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c("black", colors[1]), lty = 1, lwd = 2, bty = "n")
plot(ehec$week, ehec$bd1, type = "l", col = colors[1], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ksmooth_result$x, ksmooth_result$y)
legend("topright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c("black", colors[1]), lty = 1, lwd = 2, bty = "n")
plot(ehec$week, ehec$bd1, type = "l", col = colors[1], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ksmooth_result$x, ksmooth_result$y)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c("black", colors[1]), lty = 1, lwd = 2, bty = "n")
plot(ehec$week, ehec[,3], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
for (i in c(1:4)) {
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal", bandwidth = bandwidths[i])
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ksmooth_result$x, ksmooth_result$y)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
for (i in c(1:4)) {
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal", bandwidth = bandwidths[i])
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ksmooth_result$x, ksmooth_result$y)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
help(ksmooth)
View(ehec)
for (i in c(1:4)) {
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1:50))
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "bandwidth = 1")
line(ksmooth_result$x, ksmooth_result$y)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
line(ksmooth_result$x, ksmooth_result$y)
plot(ehec$week, ehec[, 3], type = "l", col = colors[1], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Comparison of Nadaraya-Watson and ksmooth")
# Add Nadaraya-Watson estimator
for (i in 1:length(bandwidths)) {
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1, 50))
lines(ksmooth_result$x, ksmooth_result$y, col = colors[i], lwd = 2)
}
# Add legend
legend("topright", legend = c("Nadaraya-Watson", paste("ksmooth, Bandwidth =", bandwidths)),
col = c(colors[1:4], "black"), lty = 1, lwd = 2, bty = "n")
for (i in 1:length(bandwidths)) {
# Create a new plot for the current bandwidth
plot(ehec$week, ehec[, i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = paste("Bandwidth =", bandwidths[i]))
# Add Nadaraya-Watson estimator for the current bandwidth
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1, 50))
lines(ksmooth_result$x, ksmooth_result$y, col = colors[i], lwd = 2)
# Add legend for the current plot
legend("topright", legend = c("Nadaraya-Watson", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
# Close the current plot to move on to the next
dev.off()
}
for (i in 1:length(bandwidths)) {
# Create a new plot for the current bandwidth
plot(ehec$week, ehec[, i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = paste("Bandwidth =", bandwidths[i]))
# Add Nadaraya-Watson estimator for the current bandwidth
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1, 50))
lines(ksmooth_result$x, ksmooth_result$y, col = colors[i], lwd = 2)
# Add legend for the current plot
legend("topright", legend = c("Nadaraya-Watson", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
# Close the current plot to move on to the next
dev.off()
}
for (i in 1:length(bandwidths)) {
# Create a new plot for the current bandwidth
plot(ehec$week, ehec[, i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = paste("Bandwidth =", bandwidths[i]))
# Add Nadaraya-Watson estimator for the current bandwidth
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1, 50))
lines(ksmooth_result$x, ksmooth_result$y, col = colors[i], lwd = 2)
# Add legend for the current plot
legend("topright", legend = c("Nadaraya-Watson", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
for (i in 1:length(bandwidths)) {
# Create a new plot for the current bandwidth
plot(ehec$week, ehec[, i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = paste("Bandwidth =", bandwidths[i]))
# Add Nadaraya-Watson estimator for the current bandwidth
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1, 50))
lines(ksmooth_result$x, ksmooth_result$y, col = "black", lwd = 2)
# Add legend for the current plot
legend("topright", legend = c("Nadaraya-Watson", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
for (i in c(1:4)) {
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1:50))
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = paste("Bandwidth =", bandwidths[i]))
lines(ksmooth_result$x, ksmooth_result$y, col = "black", lwd = 2)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
for (i in c(1:4)) {
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = paste("Bandwidth =", bandwidths[i]))
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1:50))
lines(ksmooth_result$x, ksmooth_result$y, col = "black", lwd = 2)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
for (i in c(1:4)) {
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = paste("Bandwidth =", bandwidths[i]))
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1,50))
lines(ksmooth_result$x, ksmooth_result$y, col = "black", lwd = 2)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
help(ylim)
help(plot)
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in c(1:4)) {
plot(ehec$week, ehec[,i+2], type = "l", col = colors[i], lwd = 2,
xlab = "Week", ylab = "Number of Infections", ylim = c(0,70),
main = paste("Bandwidth =", bandwidths[i]))
ksmooth_result <- ksmooth(ehec$week, ehec$number, kernel = "normal",
bandwidth = bandwidths[i], range.x = c(1,50))
lines(ksmooth_result$x, ksmooth_result$y, col = "black", lwd = 2)
legend("bottomright", legend = c("Nadaraya-Watson Estimator", "ksmooth"),
col = c(colors[i], "black"), lty = 1, lwd = 2, bty = "n")
}
mse_values <- numeric(length(bandwidths) + 1)
for (i in 1:(length(bandwidths) + 1)) {
mse_sum <- 0
for (obs in 1:nrow(ehec)) {
data_excluded <- ehec[-obs, ]
if (i <= length(bandwidths)) {
ksmooth_result <- ksmooth(data_excluded$week, data_excluded$number,
kernel = "normal", bandwidth = bandwidths[i], range.x = 1:50)
estimate <- predict(ksmooth_result, newdata = ehec[obs, "week"])
} else {
lm_model <- lm(number ~ week, data = data_excluded)
estimate <- predict(lm_model, newdata = ehec[obs, ])
}
squared_error <- (estimate - ehec[obs, "number"])^2
mse_sum <- mse_sum + squared_error
}
mse_values[i] <- mse_sum / nrow(ehec)
}
mse_values <- numeric(length(bandwidths) + 1)
for (i in 1:(length(bandwidths) + 1)) {
mse_sum <- 0
for (obs in 1:nrow(ehec)) {
data_excluded <- ehec[-obs, ]
if (i <= length(bandwidths)) {
ksmooth_result <- ksmooth(data_excluded$week, data_excluded$number,
kernel = "normal", bandwidth = bandwidths[i], range.x = 1:50)
estimated_value <- ksmooth_result$y[obs]
} else {
lm_model <- lm(number ~ week, data = data_excluded)
estimate <- predict(lm_model, newdata = ehec[obs, ])
}
squared_error <- (estimate - ehec[obs, "number"])^2
mse_sum <- mse_sum + squared_error
}
mse_values[i] <- mse_sum / nrow(ehec)
}
mse_values <- numeric(length(bandwidths) + 1)
for (i in 1:(length(bandwidths) + 1)) {
mse_sum <- 0
for (obs in 1:nrow(ehec)) {
data_excluded <- ehec[-obs, ]
if (i <= length(bandwidths)) {
ksmooth_result <- ksmooth(data_excluded$week, data_excluded$number,
kernel = "normal", bandwidth = bandwidths[i],
range.x = 1:50)
estimate <- ksmooth_result$y[obs]
} else {
lm_model <- lm(number ~ week, data = data_excluded)
estimate <- predict(lm_model, newdata = ehec[obs, ])
}
squared_error <- (estimate - ehec[obs, "number"])^2
mse_sum <- mse_sum + squared_error
}
mse_values[i] <- mse_sum / nrow(ehec)
}
# Print or compare the MSE values for different estimators
print(mse_values)
(0.5*19+0.75*22+0.25*24)/(0.5+0.75+0.25)
(0.75*22+0.75*24+0.25*25)/1.75
((1-0.25)*19+(1-0.25^2)*22+(1-0.25^2)*24)/((1-0.25)+(1-0.25^2)+(1-0.25^2))
((1-0.25^2)*22+(1-0.25^2)*24+(1-0.75^2)*25)/((1-0.25^2)+(1-0.25^2)+(1-0.75^2))
# load necessary packages and data
library(ggplot2)
ehec <- read.table("Ehec2014.csv", sep = ";")
colnames(ehec) <- c("week", "number")
ggplot(ehec, aes(week, number)) + geom_point() + geom_smooth(method = "lm", se = FALSE) +
xlab("Week") + ylab("Number of Infections")
lm_model <- lm(number ~ week, data = ehec)
lm_summary <- summary(lm_model)
r_squared <- lm_summary$r.squared
r_squared
Ker <- function(x) {
return(ifelse(abs(x) <= 1, (pi/4) * cos(pi/2 * x), 0))
}
NWestimator <- function(data, bandwidth)
{
len <- nrow(data)
estimates <- numeric(len)
x <- data$week
y <- data$number
for (i in 1:len) {
w <- Ker((x - x[i]) / bandwidth)
estimates[i] <- sum(w * y) / sum(w)
}
return(estimates)
}
bandwidths <- c(1, 2, 5, 8)
ehec$bd1 <- NWestimator(ehec, 1)
ehec$bd2 <- NWestimator(ehec, 2)
ehec$bd5 <- NWestimator(ehec, 5)
ehec$bd8 <- NWestimator(ehec, 8)
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n")
bandwidths <- c(1, 2, 5, 8)
ehec$bd1 <- NWestimator(ehec, 1)
ehec$bd2 <- NWestimator(ehec, 2)
ehec$bd5 <- NWestimator(ehec, 5)
ehec$bd8 <- NWestimator(ehec, 8)
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
#for (i in 3:(length(bandwidths) + 2)) {
#  lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
#}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n")
bandwidths <- c(1, 2, 5, 8)
ehec$bd1 <- NWestimator(ehec, 1)
ehec$bd2 <- NWestimator(ehec, 2)
ehec$bd5 <- NWestimator(ehec, 5)
ehec$bd8 <- NWestimator(ehec, 8)
plot(ehec$week, ehec$number, type = "l", col = "black", lwd = 2,
xlab = "Week", ylab = "Number of Infections",
main = "Nadaraya-Watson Estimation with Cosine Kernel")
colors <- c("#bf4f51", "#89cff0", "#69b3a2", "#ffd39b")
for (i in 3:(length(bandwidths) + 2)) {
lines(ehec$week, ehec[, i], col = colors[i - 2], lwd = 2)
}
legend("topleft", legend = c("original", paste("Bandwidth =", bandwidths)),
col = c("black", colors), lty = 1, lwd = 2, bty = "n")
install.packages("seqinr")
help(read.fasta)
psittaci <- read.fasta("chlamydia_psittaci.ffn", seqtype = "DNA")
library(seqinr)
psittaci <- read.fasta("chlamydia_psittaci.ffn", seqtype = "DNA")
psittaci <- read.fasta("chlamydia_psittaci.ffn", seqtype = "DNA")
psittaci <- read.fasta(file = system.file("chlamydia_psittaci.ffn", package = "seqinr"), seqtype = "DNA")
psittaci <- read.fasta(file = system.file("chlamydia_psittaci.ffn", package = "seqinr"), seqtype = "DNA")
dnafile <- system.file("chlamydia_psittaci.ffn", package = "seqinr")
read.fasta(file = dnafile, as.string = TRUE, forceDNAtolower = FALSE)
dnafile <- system.file("chlamydia_trachomatis.ffn", package = "seqinr")
read.fasta(file = dnafile, as.string = TRUE, forceDNAtolower = FALSE)
dnafile <- system.file("chlamydia_trachomatis.ffn", package = "seqinr")
read.fasta(file = dnafile, as.string = TRUE, forceDNAtolower = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
dnafile <- system.file("chlamydia_trachomatis.ffn", package = "seqinr")
readDNAStringSet(dnafile)
dnafile <- "chlamydia_trachomatis.ffn"
readDNAStringSet(dnafile)
405972/1024
406036/1024
r = 1024
406060/r
406068/r
4853308/1024
4854592/r
4869300/r
4892988/1024
166116/1024
169312/1024
182204/1024
189404/1024
1483356/1024
406204/1024
406184/1024
406124/1024
406100/1024
406096/1024
406096/1024
406208/1024
406084/1024
406180/1024
406096/1024
406128/1024
406192/1024
Sys.setenv(LANG = "en")
x
install.packages("Matrix", type = "source")
x
Sys.setenv(LANG = "en")
x
Sys.getlocale()
x
install.packages("Matrix", type = "source")
rm(list=ls())
graphics.off()
rm(list=ls())
graphics.off()
out.dir = 'out/'
check <- dir.exists(out.dir)
if (!check) dir.create(out.dir)
results.dir = 'out/merfish'
check <- dir.exists(results.dir)
if (!check) dir.create(results.dir)
number_of_animals = 2
library(Banksy)
library(gridExtra) # grid.arrange
library(ggplot2) # facet_wrap
# library(Seurat)
library(scales) # show_col
library(data.table) # fread
# library(irlba)
# library(Matrix)
# library(tidyverse)
library(plyr) # mapvalues
# library(scran)
library(tictoc)
library(ComplexHeatmap)
# library(dbscan)
# library(circlize)
library(peakRAM)
k_geom = 15;lambda = c(0.2);npcs = 20;k_expr = 50;res = seq(0.5, 5, 0.25)
list_of_animal_IDs = 1:number_of_animals
all_mfish = fread('data/merfish_all_cells.csv') # see the readme file in the data dir
setwd("D:/oostudy/24SS/Internship/banksy/Banksy_r_learning")
setwd("D:/00study/24SS/Internship/banksy/Banksy_r_learning")
all_mfish = fread('data/merfish_all_cells.csv') # see the readme file in the data dir
all_mfish <- all_mfish[,-c('Fos')]# remove Fos gene per Moffitt manuscript
all_mfish = cbind(cell_ids = paste0('cell_', 1:nrow(all_mfish)), all_mfish)
m.list = lapply(list_of_animal_IDs, function(x) all_mfish[all_mfish$Animal_ID==x,])
expr.list <- lapply(m.list, function(x){
expr = t(as.matrix(x[,-c(1:10)]))
colnames(expr) <- x$cell_ids
expr})
locs.list <- lapply(m.list, function(x){
df = as.data.frame(cbind(sdimx = x$Centroid_X, sdimy = x$Centroid_Y,
sdimz = 1000*x$Bregma))
rownames(df) <- x$cell_ids
df})
names(expr.list) <- names(locs.list) <- paste0('Animal_', list_of_animal_IDs)
bank <- BanksyObject(own.expr = expr.list, cell.locs = locs.list)
all_mfish_by_animal_list = lapply(list_of_animal_IDs, function(x) all_mfish[Animal_ID %in% x,
c('cell_ids',
'Animal_ID',
'Animal_sex',
'Behavior',
'Bregma',
'Centroid_X',
'Centroid_Y',
'Cell_class',
'Neuron_cluster_ID')])
bank@meta.data = cbind(bank@meta.data, do.call(rbind, all_mfish_by_animal_list))
ram_compute_banksy = peakRAM(bank <- ComputeBanksy(bank, k_geom = k_geom))
# bank <- ScaleBanksy(bank)
ram_scale_banksy = peakRAM(
bank <- ScaleBanksy(bank)
)
lambdas<-c(0, lambda)
# bank <- Banksy:::RunBanksyPCA(bank, lambda = lambdas, npcs = npcs)
ram_pca_banksy = peakRAM(
bank <- Banksy:::RunBanksyPCA(bank, lambda = lambdas, npcs = npcs)
)
ram_umap_banksy = peakRAM(
bank <- Banksy:::RunBanksyUMAP(bank, lambda = lambdas, npcs = npcs, nneighbors = k_expr)
)
